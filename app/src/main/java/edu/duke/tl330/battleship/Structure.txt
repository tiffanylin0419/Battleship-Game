
class Coordinate
final int row
final int column
int getRow()
int getColumn()
constructor: (int t, int c)(String)
equals, hashCode, toString
int charToInt(char)

class Placement
final Coordinate where
final char orientation
Coordinate getWhere()
char getOrientation()
void checkOrientation(char)
void checkHVOrientation()
void checkUDLROrientation()
equals, hashCode, toString
constructor: (String)(Coordinate where, char orientation) 


interface Ship<T> 
String getName
boolean occupiesCoordinates(Coordinate )
boolean isSunk()
void recordHitAt(Coordinate where)
boolean wasHitAt(Coordinate where);
T getDisplayInfoAt(Coordinate where)
 public Iterable<Coordinate> getCoordinates();


abstract class BasicShip<T> implements Ship<T> 
protected HashMap<Coordinate, Boolean> myPieces;
protected ShipDisplayInfo<T> myDisplayInfo;
protected ShipDisplayInfo<T> enemyDisplayInfo;
Constructor:(Iterable<Coordinate> where, ShipDisplayInfo<T> myDisplayInfo, ShipDisplayInfo<T> enemyDisplayInfo)
checkCoordinateInThisShip(Coordinate c)
//override function

Class RectangleShip<T> extends BasicShip<T>
private final String name;
String getName
Constructor:(String name, Coordinate upperLeft, int width, int height, ShipDisplayInfo<T> myDisplayInfo, ShipDisplayInfo<T>enemyDisplayInfo), (String name,Coordinate upperLeft, int width, int height, T data, T onHit), (Coordinate upperLeft, T data, T onHit) 
static HashSet<Coordinate> makeCoords(Coordinate upperLeft, int width, int height)

StairShip<T> extends BasicShip<T>
private final String name;
String getName()
Constructor: (String name, Coordinate upperLeft, char orientation, ShipDisplayInfo<T> myDisplayInfo,
      ShipDisplayInfo<T> enemyDisplayInfo) (String name, Coordinate upperLeft, char orientation, T data, T onHit)
static HashSet<Coordinate> makeCoords(Coordinate upperLeft, char orientation) 
static HashSet<Coordinate> makeUpCoords(Coordinate upperLeft)
static HashSet<Coordinate> makeRightCoords(Coordinate upperLeft) 
static HashSet<Coordinate> makeLeftCoords(Coordinate upperLeft)
static HashSet<Coordinate> makeDownCoords(Coordinate upperLeft)

TShip<T> extends BasicShip<T>
Same as top

interface ShipDisplayInfo<T>
T getInfo(Coordinate where, boolean hit)

class SimpleShipDisplayInfo<T> implements ShipDisplayInfo<T>
private final T myData;
private final T onHit;
Constructor: (T md, T oh)
//override function




interface AbstractShipFactory<T> 
Ship<T> makeSubmarine(Placement where);
Ship<T> makeBattleship(Placement where);
Ship<T> makeCarrier(Placement where);
Ship<T> makeDestroyer(Placement where);

class V1ShipFactory implements AbstractShipFactory<Character>
protected Ship<Character> createShip(Placement where, int w, int h, char letter, String name)
protected Ship<Character> createTShip(Placement where, int w, int h, char letter, String name) 
protected Ship<Character> createStairShip(Placement where, int w, int h, char letter, String name)
//override function



abstract class PlacementRuleChecker<T>
private final PlacementRuleChecker<T> next;
constructor: (PlacementRuleChecker<T> next)
public boolean checkPlacement(Ship<T> theShip, Board<T> theBoard) 
protected abstract boolean checkMyRule(Ship<T> theShip, Board<T> theBoard);

class InBoundsRuleChecker<T> extends PlacementRuleChecker<T>  
Same as bottom

class NoCollisionRuleChecker<T> extends PlacementRuleChecker<T>  // two classes are almost the same
Constructor: (PlacementRuleChecker<T> next)
//override function



interface Board<T>
int getWidth()
int getHeight()
public String tryAddShip(Ship<T> toAdd);
public T whatIsAtForSelf(Coordinate where);
public T whatIsAtForEnemy(Coordinate where);
public Ship<T> fireAt(Coordinate c);
public boolean noShips();

class BattleShipBoard<T> implements Board<T>
final int width
final int height
final ArrayList<Ship<T>> myShips
private final PlacementRuleChecker<T> placementChecker;
private HashSet<Coordinate> enemyMisses;
final T missInfo;
//override function
Constructor: (int w, int h, missInfo)(int w, int h, PlacementRuleChecker<T> placementChecker, missInfo)
protected T whatIsAt(Coordinate where, boolean isSelf) {



class BoardTextView
final Board<Character> toDisplay
constructor: (Board<Character> toDisplay) 
String makeHeader() {
public String displayEnemyBoard() {
String displayMyOwnBoard()
protected String displayAnyBoard(Function<Coordinate, Character> getSquareFn) {
public String displayMyBoardWithEnemyNextToIt(BoardTextView enemyView, String myHeader, String enemyHeader) {

App
Constructor: (TextPlayer player1, TextPlayer player2)
public void doPlacementPhase() throws IOException {
public void doAttackingPhase() throws IOException {
public static void main(String[] args) throws IOException {


public class TextPlayer {
final BufferedReader inputReader;
  final PrintStream out;
  final Board<Character> theBoard;
  final BoardTextView view;
  final String name;
  final AbstractShipFactory<Character> shipFactory;
  final ArrayList<String> shipsToPlace;  
final HashMap<String, Function<Placement, Ship<Character>>> shipCreationFns;
Constructor: (String name, Board<Character> theBoard, BufferedReader input, PrintStream out,
      AbstractShipFactory<Character> shipFactory)
protected void setupShipCreationMap()
protected void setupShipCreationList() 
public Placement readPlacement(String prompt) throws IOException {
public Coordinate readCoordinate() throws IOException {
public void doOnePlacement() throws IOException {
public void doOnePlacement(String shipName, Function<Placement, Ship<Character>> createFn) throws IOException {
public void doPlacementPhase() throws IOException {
public void playOneTurn(TextPlayer enemy) throws IOException {





