/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.tl330.battleship;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Arrays;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.parallel.ResourceAccessMode;
import org.junit.jupiter.api.parallel.ResourceLock;
import org.junit.jupiter.api.parallel.Resources;

class AppTest {

  private TextPlayer createTextPlayer(int w, int h, String inputData, OutputStream bytes) {
    BufferedReader input = new BufferedReader(new StringReader(inputData));
    PrintStream output = new PrintStream(bytes, true);
    Board<Character> board = new BattleShipBoard<Character>(w, h, 'X');
    V1ShipFactory shipFactory = new V1ShipFactory();
    return new TextPlayer("A", board, input, output, shipFactory);
  }

  @Test
  public void test_readAction() throws IOException {
    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    TextPlayer p3 = createTextPlayer(3, 2, "F\nF\na1\nF\na1\nF\na2\n", bytes);
    char c = p3.readAction("");
    assertEquals('F', c);
  }

  // add different actio
  @Test
  public void test_doAttackingPhase() throws IOException {
    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    TextPlayer p1 = createTextPlayer(3, 2, "A0h\nB\nF\na1\nF\na1\nF\na2\n", bytes);
    TextPlayer p2 = createTextPlayer(3, 2, "A0h\nF\nb1\nF\na2\n", bytes);
    App a = new App(p1, p2);
    p1.doOnePlacement();
    p2.doOnePlacement();
    a.doAttackingPhase();
    String expected = "Player A where do you want to place a Destroyer?\n" +
        "  0|1|2\n" +
        "A d|d|d A\n" +
        "B  | |  B\n" +
        "  0|1|2\n\n" +
        "Player A where do you want to place a Destroyer?\n" +
        "  0|1|2\n" +
        "A d|d|d A\n" +
        "B  | |  B\n" +
        "  0|1|2\n\n" +
        "Possible actions for Player A:\n\n F Fire at a square\n M Move a ship to another square (2 remaining)\n S Sonar scan (1 remaining)\n\nPlayer A, what would you like to do?\n"
        +
        "Input must be F, M or S\n" +
        "Player A's turn:\n" +
        "     Your ocean                           Player A's ocean\n" +
        "  0|1|2                    0|1|2\n" +
        "A d|d|d A                A  | |  A\n" +
        "B  | |  B                B  | |  B\n" +
        "  0|1|2                    0|1|2\n" +
        "You hit a destroyer!\n" +
        "Player A win. Player A lose.\n"

    ;
    assertEquals(expected, bytes.toString());
  }

  @Test
  public void test_getAllPlacement() {
    String expected="F\nA0\nF\nA1\nF\nA2\nF\nA3\nF\nA4\nF\nA5\nF\nA6\nF\nA7\nF\nA8\nF\nA9\n"
      +"F\nB0\nF\nB1\nF\nB2\nF\nB3\nF\nB4\nF\nB5\nF\nB6\nF\nB7\nF\nB8\nF\nB9\n";
    assertEquals(expected.substring(0,100),App.getAllPlacement().substring(0,100));
  }

  @Test
  public void test_makePlayer() throws IOException{
    BufferedReader input = new BufferedReader(new StringReader("j\nY\nN\n"));
    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    PrintStream out = new PrintStream(bytes, true);
    TextPlayer p1=App.makePlayer("A",new BattleShipBoard<Character>(5, 6, 'X'),input,out,new V1ShipFactory());

    TextPlayer p2=App.makePlayer("B",new BattleShipBoard<Character>(5, 6, 'X'),input,out,new V1ShipFactory());

    String expected ="Is player A computer? (Y for yes, N for no)\nInput needs to be Y or N.\nIs player B computer? (Y for yes, N for no)\n";
    assertEquals(expected,bytes.toString());

    

  }

  
  public void test_main_helper(String inFile,String outFile) throws IOException {
    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    PrintStream out = new PrintStream(bytes, true);
    InputStream input = getClass().getClassLoader().getResourceAsStream(inFile);
    assertNotNull(input);
    InputStream expectedStream = getClass().getClassLoader().getResourceAsStream(outFile);
    assertNotNull(expectedStream);
    InputStream oldIn = System.in;
    PrintStream oldOut = System.out;
    try {
      System.setIn(input);
      System.setOut(out);
      App.main(new String[0]);
    } finally {
      System.setIn(oldIn);
      System.setOut(oldOut);
    }
    String expected = new String(expectedStream.readAllBytes());
    String actual = bytes.toString();
    assertEquals(expected, actual);
  }

  @Test
  @ResourceLock(value = Resources.SYSTEM_OUT, mode = ResourceAccessMode.READ_WRITE)
  public void test_main()throws IOException {
    ArrayList<String> inFiles = new ArrayList<String>();
    inFiles.addAll(Arrays.asList("input.txt","input0.txt","input1.txt"));
    ArrayList<String> outFiles = new ArrayList<String>();
    outFiles.addAll(Arrays.asList("output.txt","output0.txt","output1.txt"));
    for(int i=0;i<inFiles.size();i++){
      test_main_helper(inFiles.get(i),outFiles.get(i));
    }
  }
}
